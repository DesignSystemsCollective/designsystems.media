---
import { getCollection } from "astro:content";
import LabelCount from "../../components/LabelCount.astro";
import Title from "../../components/Title.astro";
import BaseLayout from "../../layouts/BaseLayout.astro";
import ResponsiveGrid from "../../layouts/ResponsiveGrid.astro";

const allPosts = await getCollection("media");

// Filter posts with speakers
const filteredPosts = allPosts.filter((post) => {
  return (
    !post.data.draft && post.data.speakers && post.data.speakers.length > 0
  );
});

const speakers = [
  ...new Set(
    filteredPosts
      .map((post) => post.data.speakers)
      .flat()
      .sort(),
  ),
];

function calculatePostCountForSpeaker(speakerName) {
  // Assuming 'posts' is an array of post objects with 'speakers' property
  return allPosts.filter((post) => post.data.speakers?.includes(speakerName))
    .length;
}
const title = "Speakers";
const groupedSpeakers = {};

// Group the speakers by the first letter
speakers.forEach((speaker) => {
  if (!speaker) return;
  const firstLetter = speaker[0].toUpperCase(); // Convert to uppercase for consistency
  if (!groupedSpeakers[firstLetter]) {
    groupedSpeakers[firstLetter] = [];
  }
  groupedSpeakers[firstLetter].push(speaker);
});
---

<BaseLayout sidebar={false} metadataProps={{ title }}>
  <Title>{title}</Title>
  <div class="alphabet">
    {
      Object.keys(groupedSpeakers).map((letter) => (
        <a href={`#${letter}`}>{letter}</a>
      ))
    }
  </div>
  <ResponsiveGrid>
    {
      Object.keys(groupedSpeakers).map((letter) => (
        <div>
          <h2 id={letter}>{letter}</h2>
          <div class="grid">
            {groupedSpeakers[letter].map((speaker) => (
              <LabelCount
                type="speakers"
                name={speaker}
                count={calculatePostCountForSpeaker(speaker)}
              />
            ))}
          </div>
        </div>
      ))
    }
  </ResponsiveGrid>
</BaseLayout>

<style>
  .alphabet {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    width: 100%;
    padding: 1rem;
    gap: 0.5em;
    margin-bottom: 1rem;
  }
  .alphabet a {
    font-size: 1.25rem;
    text-decoration: none;
    background: var(--tagCount-background);
    padding: 0.1em 0.6em 0em;
    border-radius: 1rem;
  }
  .alphabet a:hover {
    outline: 1px solid var(--tagCount-count);
  }
  .grid {
    display: flex;
    flex-direction: column;
    gap: 0.5em;
  }
</style>
