---
// src/layouts/ShowLayout.astro
import type { CollectionEntry } from "astro:content";
import Hero from "../components/media/Hero.astro";
import MetaList from "../components/media/MetaList.astro";
import MetaItem from "../components/media/MetaItem.astro";
import SectionHeader from "../components/SectionHeader.astro";
import FormattedDate from "../components/FormattedDate.astro";
import PodcastGrid from "../components/PodcastGrid.astro";

type ShowEntry = CollectionEntry<"show">;
type PodcastEntry = CollectionEntry<"podcast">;

// Create a union type that accepts props from either collection
export interface Props extends Partial<ShowEntry["data"]>, Partial<PodcastEntry["data"]> {
  // Common props that might be used by both
  slug?: ShowEntry["slug"] | PodcastEntry["slug"];
  episodes?: CollectionEntry<"podcast">[];
}

// Function to extract domain and extension, removing "www."
function getDomainFromUrl(url) {
  try {
    const urlObject = new URL(url);
    let hostname = urlObject.hostname;

    // Remove "www." if it exists at the beginning
    if (hostname.startsWith("www.")) {
      hostname = hostname.substring(4); // Remove the first 4 characters ("www.")
    }

    return hostname;
  } catch (error) {
    console.error("Invalid URL:", url, error);
    return url; // Return original if parsing fails
  }
}

// Destructure all possible props with fallback values where needed
const { 
  title, 
  image, 
  slug, 
  speakers, 
  episodeCount, 
  explicit,
  hasEpisodeImage,
  episodes,
  showSlug,
  podcastTitle,
  publishedAt,
  audioUrl,
  tags,
  websiteUrl,
  // Add any other props that might come from the podcast collection
  // that aren't already listed above
  ...restProps
} = Astro.props;

const displayUrl = getDomainFromUrl(websiteUrl);

const isShow = showSlug ? false : true;
const layoutType = !showSlug ? "show" : "episode";
---

<article data-pagefind-body data-pagefind-sort>
  <Hero 
    title={title} 
    image={image}
    hasEpisodeImage={hasEpisodeImage}
    showSlug={showSlug}
    podcastTitle={podcastTitle}
    data-pagefind-meta={`image:${image?.src}`}
    audioUrl={audioUrl}
    speakers={speakers}
    tags={tags}
  />
  
  <div class={`show-content ${layoutType}`}>
    <MetaList>
      {explicit && (
        <MetaItem>
          <span class="explicit">Explicit</span>
        </MetaItem>
      )}
      {speakers && !isShow && (
        <MetaItem icon="fluent:person-20-filled" speakers={speakers} label="Speakers">
        </MetaItem >
      )}
      {tags && !isShow && (
        <MetaItem icon="fluent:tag-20-filled" tags={tags} label="Tags">
        </MetaItem >
      )}
      {websiteUrl && isShow && (
        <MetaItem icon="fluent:globe-20-filled">
          <a href={websiteUrl} target="_blank">{displayUrl}</a>
        </MetaItem >
      )}
      {publishedAt && !isShow && (
        <MetaItem icon="fluent:calendar-20-filled" label="Published">
<FormattedDate date={publishedAt} />
        </MetaItem >
      )}
    </MetaList>
    
    <div class="prose" data-pagefind-weight="3">
      <div class="description"><slot /></div>
      {episodes && episodes.length > 0 && (

  <SectionHeader
    title={episodes.length + ` episodes`}
    padding={false}
  />
        <PodcastGrid media={episodes} />
      )}
    </div>
  </div>
</article>

<style>
  .title {
    margin: 0 auto 1em;
    padding: 2.5rem 0rem 0.5rem;
    width: 100%;
    max-width: 900px;
  }

  .prose {
    margin: 0;
    color: var(--body-text);
    overflow-wrap: anywhere;
  }

  .description {
    margin: 0 0 2rem;
  }

  .prose p:first-of-type {margin-top: 0;}

  .prose .meta-data {
    margin: 0 0 1rem;
  }

  :global(.prose h1),
  :global(.prose h2),
  :global(.prose h3),
  :global(.prose h4),
  :global(.prose h5),
  :global(.prose h6) {
    font-size: 1em;
  }

  :global(.prose .responsive-container){
    padding: 1rem 0 1rem;
  }

  .show-content {
    position: relative;
    width: 100%;
    max-width: 900px;
    margin: auto;
    padding: 1rem;
    z-index:20;
    display: grid;
    gap: 0rem;
    justify-content: center;
    align-items: start;
    grid-template-columns: minmax(100px, 200px) 1fr;
  }
  .show-content.show{
    grid-template-columns: 1fr;
    gap: 1rem;
  }

  @media screen and (max-width: 768px) {
    .title {
      padding: 2.5rem 1rem 0.5rem;
    }

   .show-content  {
      display: flex;
      flex-direction: column;
      gap: 0rem;
    }
  }
</style>