---
// src/layouts/ShowLayout.astro
import type { CollectionEntry } from "astro:content";
import Hero from "../components/media/Hero.astro";
import MetaList from "../components/media/MetaList.astro";
import MetaItem from "../components/media/MetaItem.astro";
import EpisodeGrid from "../components/episodes/EpisodeGrid.astro";

type ShowEntry = CollectionEntry<"show">;
type PodcastEntry = CollectionEntry<"podcast">;

// Create a union type that accepts props from either collection
export interface Props extends Partial<ShowEntry["data"]>, Partial<PodcastEntry["data"]> {
  // Common props that might be used by both
  slug?: ShowEntry["slug"] | PodcastEntry["slug"];
  episodes?: CollectionEntry<"podcast">[];
}

// Destructure all possible props with fallback values where needed
const { 
  title, 
  image, 
  slug, 
  speakers, 
  episodeCount, 
  explicit,
  hasEpisodeImage,
  episodes,
  showSlug,
  podcastTitle,
  audioUrl,
  // Add any other props that might come from the podcast collection
  // that aren't already listed above
  ...restProps
} = Astro.props;
---

<article data-pagefind-body data-pagefind-sort>
  <Hero 
    title={title} 
    image={image}
    hasEpisodeImage={hasEpisodeImage}
    showSlug={showSlug}
    podcastTitle={podcastTitle}
    data-pagefind-meta={`image:${image?.src}`}
    audioUrl={audioUrl}
  />
  
  <div class="show-content">
    <MetaList>
      {episodeCount && (
        <MetaItem icon="fluent:headphones-20-filled">
          {episodeCount} episodes
        </MetaItem>
      )}
      
      {explicit && (
        <MetaItem >
          <span class="explicit">Explicit</span>
        </MetaItem>
      )}

      {speakers && (
        <MetaItem icon="fluent:person-20-filled" speakers={speakers}>
        </MetaItem >
      )}
    </MetaList>
    
    <div class="prose" data-pagefind-weight="3">
      <slot />
      {episodes && episodes.length > 0 && (
        <EpisodeGrid episodes={episodes} />
      )}
    </div>
  </div>
</article>

<style>
  :global(.title) {
    margin: 0 auto 1em;
    padding: 2.5rem 0rem 0.5rem;
    width: 100%;
    max-width: 900px;
  }

  .prose {
    margin: auto;
    color: var(--body-text);
    overflow-wrap: anywhere;
  }

  :global(.prose h1),
  :global(.prose h2),
  :global(.prose h3),
  :global(.prose h4),
  :global(.prose h5),
  :global(.prose h6) {
    font-size: 1em;
  }

  .show-content {
    position: relative;
    width: 100%;
    max-width: 900px;
    margin: auto;
    padding: 1rem;
    z-index:20;
    display: grid;
    gap: 2rem;
    justify-content: center;
    align-items: start;
    grid-template-columns: minmax(100px, 200px) 1fr;
  }


  @media screen and (max-width: 1024px) {
    :global(.title) {
      padding: 2.5rem 1rem 0.5rem;
    }

   .show-content  {
      display: flex;
      flex-direction: column;
    }
  }
</style>