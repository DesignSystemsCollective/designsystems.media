---
import { Icon } from "astro-icon/components";
import { repository } from "../../package.json";
import Title from "../components/Title.astro";
import { convertToSlug } from "../utils/convertToSlug";
import { getCollection } from "astro:content";
import { formatDuration } from "../utils/formatDuration";
import type { BaseShowProps } from "../types/media";

const { title, image, slug, speakers, episodeCount, explicit } = Astro.props;

// Get episodes for this show
const episodes = await getCollection("podcast", ({ data }) => {
  return data.showSlug === slug;
});

// Sort episodes by published date (newest first)
episodes.sort(
  (a, b) =>
    new Date(b.data.publishedAt).getTime() -
    new Date(a.data.publishedAt).getTime()
);
---

<article data-pagefind-body data-pagefind-sort>
  <div class="hero-image" data-pagefind-meta={`image:${image?.src}`}>
    <div class="show-container">
      <div class="podcast-artwork"><img src={image?.src} alt={title} /></div>
    </div>
    <div class="background" style={`background-image: url('${image?.src}')`}>
    </div>
  </div>
  <Title data-pagefind-meta="title">{title}</Title>
  <div class="content">
    <div class="meta-data">
      <div class="inline">
        <Icon name="fluent:headphones-20-filled" size={20} />
        {episodeCount} episodes
      </div>
      {explicit && <span class="explicit">Explicit</span>}
      <div class="break"></div>

      <div class="speakers">
        <span><Icon name="fluent:person-20-filled" size={20} />Speakers</span>
        {
          speakers?.map((speaker) => (
            <a
              href={`/speakers/${convertToSlug(speaker)}/`}
              class="speaker"
              data-pagefind-filter="speaker"
              data-pagefind-weight="5"
            >
              {speaker}
            </a>
          ))
        }
      </div>
      <div class="break"></div>
      <span class="inline">
        <Icon name="fluent:edit-20-filled" size={20} />
        <a
          href={`${repository.url}/tree/main/src/content/media/${slug}/index.mdx`}
          >Edit on GitHub</a
        >
      </span>
    </div>
    <div class="prose" data-pagefind-weight="3">
      <slot />
     <div class="episodes-grid-wrapper">
  <div class="episodes-grid">
    <div class="episodes-grid-header">Episode</div>
    <div class="episodes-grid-header">Date</div>
    <div class="episodes-grid-header">Duration</div>

    {episodes.map((episode, index) => {
      const isEven = index % 2 === 1;
      const rowClass = isEven ? 'even' : '';
      const dateFormatted = new Date(episode.data.publishedAt).toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'short',
        day: 'numeric'
      });

      return (
        <>
          <div class={`episodes-cell ${rowClass}`}>
            <div class="episode-content">
              {episode.data.image && (
                <img src={episode.data.image} alt={`${episode.data.title} thumbnail`} class="episode-thumbnail" />
              )}
              <div class="episode-title-container">
                <a class="episode-title" href={`/podcast/${episode.slug}/`}>
                {episode.data.season && episode.data.episode && (
              <span class="episode-badge">S{episode.data.season}E{episode.data.episode}</span><br/>
            )}
                  {episode.data.title}
                </a>
              </div>
            </div>
          </div>
          <div class={`episodes-cell ${rowClass} meta`}>{dateFormatted}</div>
          <div class={`episodes-cell ${rowClass} meta duration`}>{formatDuration(episode.data.duration)}</div>
        </>
      );
    })}
  </div>
</div>

    </div>
  </div>
</article>

<style>
.episodes-grid-wrapper {
  border-radius: 0;
  overflow: hidden;
}

.episodes-grid {
  display: grid;
  column-gap: 0;
  grid-template-columns: 1fr auto auto;
}

.episodes-grid-header {
  padding: 12px 4px;
  font-weight: 600;
  color: #e5e7eb;
  font-size: 14px;
  text-transform: uppercase;
  letter-spacing: 0.05em;
    border-bottom: 1px solid var(--hr);
}

.episodes-cell {
  padding: 12px 4px;
    border-bottom: 1px solid var(--hr);
  display: flex;
  align-items: center;
  min-height: 80px;
  transition: background-color 0.2s ease;
}

.episodes-cell.even {
  background-color: transparent;
}

.episodes-cell:hover {
  background-color: transparent;
}

.episode-content {
  display: flex;
  align-items: center;
  gap: 16px;
  column-gap: 16px;
  width: 100%;
}

.episode-thumbnail {
  width: 60px;
  height: 60px;
  border-radius: 8px;
  object-fit: cover;
  flex-shrink: 0;
  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
}

.episode-title-container {
  min-width: 0;
  flex: 1;
  row-gap: 4px;
}

.episode-title {
    color: var(--body-text);
  font-weight: 500;
  text-decoration: none;
  font-size: 14px;
  line-height: 1.4;
  display: block;
  transition: color 0.2s ease;
}

.episode-title:hover {
    color: var(--body-text);
}

.meta {
    color: var(--meta-data);
  font-size: 14px;
  white-space: nowrap;
}

.monospace {
  font-family: monospace;
}

.episode-badge {
  background-color: #f3f4f6;
  color: #374151;
  padding: 4px 8px;
  border-radius: 9999px;
  font-size: 12px;
  font-weight: 500;
  white-space: nowrap;
  margin-bottom: 4px;
}


  .hero-image {
    position: relative;
    width: 100vw;
    overflow: hidden;
    height: auto;
    margin: -1.5rem -1.5rem 0rem -1.5rem;
    padding: 0rem;
    text-align: center;
  }
  .hero-image img {
    max-width: 400px;
    height: auto;
    z-index: 10;
    position: relative;
  }

  .show-container {
    position: relative;
    z-index: 100;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 2rem;
    min-height: 250px;
    gap: 1.5rem;
  }
  .podcast-artwork {
    width: 200px;
    height: 200px;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
  }
  .podcast-artwork img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  .hero-image .background {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-size: cover;
    background-position: center center;
    opacity: 1;
    overflow: hidden;
    animation: fadeIn 1.5s;
  }
  .hero-image .background::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    width: 100%;
    height: 100vh;
    backdrop-filter: blur(2.5rem);
  }
  @keyframes fadeIn {
    0% {
      opacity: 0;
    }
    100% {
      opacity: 1;
    }
  }
  :global(.title) {
    margin: 0 auto 1em;
    padding: 2.5rem 0rem 0.5rem;
    width: 100%;
    max-width: 900px;
  }
  .prose {
    margin: auto;
    color: var(--body-text);
    overflow-wrap: anywhere;
  }
  :global(.prose h1),
  :global(.prose h2),
  :global(.prose h3),
  :global(.prose h4),
  :global(.prose h5),
  :global(.prose h6) {
    font-size: 1em;
  }
  .meta-data {
    color: var(--meta-data);
    padding: 1rem 0em;
    padding-left: 1.8rem;
    display: inline-flex;
    flex-wrap: wrap;
    flex-direction: column;
    gap: 1rem 0;
    font-size: 1.1rem;
    border-bottom: 1px solid var(--hr);
    justify-content: baseline;
  }
  .meta-data a {
    color: var(--meta-data-link);
  }

  .meta-data a:hover {
    color: var(--accent-hover);
  }
  .meta-data span {
    color: var(--meta-data);
  }
  .tags,
  .speakers {
    line-height: normal;
    align-items: baseline;
    margin-block-start: 0;
    display: flex;
    flex-wrap: none;
    flex-direction: column;
    gap: 0.5em 0em;
  }
  .break {
    display: none;
  }
  .meta-data [data-icon] {
    margin-right: 0.25em;
    position: absolute;
    transform: translateX(-1.8rem);
  }
  .meta-data span.inline [data-icon] {
    margin-top: 0.2em;
  }
  .content {
    width: 100%;
    max-width: 900px;
    margin: auto;
    padding: 1rem;
    display: grid;
    gap: 2rem;
    justify-content: center;
    align-items: start;
    grid-template-columns: minmax(100px, 200px) 1fr;
  }
  @media screen and (max-width: 1024px) {
    .hero-image {
      max-height: 405px;
      height: auto;
      margin: 0;
    }
    .audio-player-container {
      padding: 1.5rem;
      min-height: 200px;
    }
    .podcast-artwork {
      width: 150px;
      height: 150px;
    }
    .hero-image .video-embed {
      width: 100%;
      max-width: 720px;
    }
    :global(.title) {
      padding: 2.5rem 1rem 0.5rem;
    }
    .meta-data {
      padding-left: 0;
      flex-direction: row;
      gap: 0em 2rem;
    }
    .meta-data [data-icon] {
      position: relative;
      transform: translateX(0);
    }
    .tags,
    .speakers {
      display: inline-flex;
      flex-wrap: wrap;
      flex-direction: row;
      line-height: normal;
      gap: 0.25em 1em;
      align-items: baseline;
      margin-block-start: 0.5em;
    }
    .inline {
      margin-block-start: 0.5em;
    }
    .break {
      flex-basis: 100%;
      height: 0;
      display: block;
    }
    .content {
      display: flex;
      flex-direction: column;
    }
  }
</style>
