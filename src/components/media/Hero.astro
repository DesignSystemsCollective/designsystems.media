---
// src/components/media/Hero.astro
import MediaImage from "./MediaImage.astro";
import Title from "../Title.astro";
import { convertToSlug } from "../../utils/convertToSlug";
export interface Props {
  title: string;
  image?: string | null;
  showArtwork?: boolean;
  showSlug: string;
  podcastTitle: string;
  hasEpisodeImage?: boolean;
  audioUrl?: string;
}

const {
  title,
  image,
  showSlug,
  audioUrl,
  podcastTitle,
  hasEpisodeImage,
  showArtwork = true,
  speakers,
} = Astro.props;

function getAudioMimeType(url) {
  if (!url) return "audio/mpeg"; // fallback if no URL

  const extension = url.split(".").pop().toLowerCase();

  const mimeTypes = {
    mp3: "audio/mpeg",
    wav: "audio/wav",
    ogg: "audio/ogg",
    oga: "audio/ogg",
    m4a: "audio/mp4",
    aac: "audio/aac",
    flac: "audio/flac",
    webm: "audio/webm",
  };

  return mimeTypes[extension] || "audio/mpeg";
}

const showImages = import.meta.glob("/src/content/show/*/poster.jpg", {
  eager: true,
});

// Image loading logic
let imageToUse;

if (hasEpisodeImage === undefined) {
  // This is a show page - just use the image directly
  imageToUse = image.src;
} else {
  // This is an episode page
  if (hasEpisodeImage === true && image) {
    // Use episode image if it exists
    imageToUse = image.src;
  } else {
    // Fall back to show poster
    const showImagePath = `/src/content/show/${showSlug}/poster.jpg`;
    const showImage = showImages[showImagePath];
    if (showImage) {
      imageToUse = showImage.default.src;
    }
  }
}
---

<div class="hero-image">
  <div class="show-container">
    {
      showArtwork && (
        <MediaImage
          src={imageToUse}
          alt={title}
          size="large"
          class="podcast-artwork"
        />
      )
    }
  </div>

  <div class="page-title">
    <Title data-pagefind-meta="title">{title}</Title>
    {
      showSlug ? (
        <a
          href={`/show/${showSlug}/`}
          class="show"
          data-pagefind-filter="show"
          data-pagefind-weight="5"
        >
          {podcastTitle}
        </a>
      ) : (
        // Otherwise (if showSlug does NOT exist)
         <> {/* Use a fragment to group the speakers content */}
        {speakers && speakers.length > 0 && (
          <div class="speakers-container">
            {speakers.map((speaker, index) => (
              <>
                <a
                  href={`/speakers/${convertToSlug(speaker)}/`}
                  class="speaker"
                  data-pagefind-filter="speaker"
                  data-pagefind-weight="5"
                >{speaker}</a>{/* Add a comma if it's not the last item */}
                {index < speakers.length - 1 && ", "}
              </>
            ))}
          </div>
        )}
      </>
      )
    }
  </div>

  {
    audioUrl && (
      <audio controls preload="metadata" class="audio-embed">
        <source src={audioUrl} type={getAudioMimeType(audioUrl)} />
        Your browser does not support the audio element.
      </audio>
    )
  }
</div>
<div class="background" style={`background-image: url('${imageToUse}')`}>
  <div class="scrim"></div>
</div>
<style>
  .hero-image {
    position: relative;
    width: 100vw;
    overflow: hidden;
    height: auto;
    margin: 0 -1.5rem 0rem -1.5rem;
    padding: 2rem 1rem 0;
    min-height: 300px;
    z-index: 10;
  }
  .background {
    position: absolute;
    top: 0rem;
    left: 0;
    right: 0;
    z-index: 0;
    background-size: cover;
    background-position: center bottom;
    opacity: 1;
    overflow: hidden;
    min-height: 55vh;
    max-height: 700px;
  }
  .background::before {
    content: "";
    position: absolute;
    width: 100%;
    height: 100%;
    backdrop-filter: blur(4rem);
  }
  .scrim {
    content: "";
    z-index: 2;
    position: absolute;
    left: 0;
    right: 0;
    bottom: 0;
    padding: 0;
    top: 0;
    background: var(--scrim-gradient);
  }

  .show-container {
    position: relative;
    z-index: 100;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 2rem;
    min-height: 250px;
    gap: 1.5rem;
  }

  .page-title {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0rem;
  }
  h1.title {
    padding: 1rem 0 0;
  }
  .page-title .show {
    font-weight: 600;
  }
.speakers-container a{
    font-weight: 600;
}
  audio {
    position: relative;
    z-index: 100;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 1.5rem;
    margin: 1.5rem auto;
  }
  .audio-embed {
    width: 100%;
    max-width: 900px;
    height: 54px;
    border-radius: 8px;
    backdrop-filter: blur(10px);
  }
  .audio-embed::-webkit-media-controls-panel {
    background-color: rgba(255, 255, 255, 0.1);
  }

  @keyframes fadeIn {
    0% {
      opacity: 0;
    }
    100% {
      opacity: 1;
    }
  }

  @media screen and (max-width: 1024px) {
    .hero-image {
      height: auto;
      margin: 0;
    }

    .show-container {
      padding: 1.5rem;
      min-height: 200px;
    }

    .background {
      height: 320px;
    }
  }
</style>
