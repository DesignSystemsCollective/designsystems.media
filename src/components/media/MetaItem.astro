---
// src/components/media/MetaItem.astro
import { Icon } from "astro-icon/components";
import { convertToSlug } from "../../utils/convertToSlug";

export interface Props {
  icon?: string;
  iconSize?: number;
  label?: string;
  type?: "inline" | "block" | undefined;
  class?: string;
  speakers?: string[];
  tags?: string[];
}

const {
  speakers,
  tags,
  icon,
  iconSize = 20,
  label,
  type = "inline",
  class: className = "",
} = Astro.props;
---

<div class={`meta-item ${type} ${className}`}>
  {icon && <Icon name={icon} size={iconSize} />}
  {label && <span class="meta-label">{label}</span>}
  <div class="meta-content">
    <slot />
    {(
        // Otherwise (if showSlug does NOT exist)
         <> {/* Use a fragment to group the speakers content */}
        {speakers && speakers.length > 0 && (
          <div class="speakers-container">
            {speakers.map((speaker, index) => (
              <>
                <a
                  href={`/speakers/${convertToSlug(speaker)}/`}
                  class="speaker"
                  data-pagefind-filter="speaker"
                  data-pagefind-weight="5"
                >{speaker}</a>{/* Add a comma if it's not the last item */}
                {index < speakers.length - 1 && <span>,</span> }
              </>
            ))}
          </div>
        )}
      </>
      )
    }
      {(
        // Otherwise (if showSlug does NOT exist)
         <> {/* Use a fragment to group the speakers content */}
        {tags && tags.length > 0 && (
          <div class="tags-container">
            {tags.map((tag, index) => (
              <>
                <a
                  href={`/tags/${convertToSlug(tag)}/`}
                  class="tag"
                  data-pagefind-filter="tag"
                  data-pagefind-weight="5"
                >{tag}</a>{/* Add a comma if it's not the last item */}
                {index < tags.length - 1 && <span>,</span> }
              </>
            ))}
          </div>
        )}
      </>
      )
    }
  </div>
</div>

<style>
  .meta-item {
    display: flex;
    justify-content: center;
    align-items: start;
    gap: 0.25em;
    flex-direction: column;
  }

  .meta-item.block {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    gap: 0.5em;
  }

  .meta-label {
    font-weight: 600;
  }

  .meta-content {
    display: contents;
    color: var(--tx)
  }

  /* Special styling for explicit badge */
  .meta-item :global(.explicit) {
    background: rgb(var(--accent));
    color: white;
    padding: 0.4em 0.5em 0.2rem;
    border-radius: 4px;
    font-size: 0.8em;
    font-weight: 600;
    line-height: 1em;
    text-transform: uppercase;
  }

    .speakers-container span {
      display: none;
    }

    .speakers-container {
      display: flex;
      flex-direction:column;
      gap: 0.25rem;
    }

  @media screen and (max-width: 768px) {
    .show-content {
      padding: 0;
    }
    .meta-item {
      display: flex;
      justify-content: flex-start;
      align-items: center;
      gap: 0.5rem;
      padding: 0em;
      flex-direction: row;
      min-height: 1rem;
    }
    .meta-content {
      display: flex;
      flex-direction: row;
    }
    .speakers-container span {
      display: inline;
      margin-right: 0.25rem;
    }

    .speakers-container {
      display: flex;
      flex-direction:row;
      gap: 0rem;
    }
  }


@media screen and (min-width: 768px) {

 .meta-item {
  padding: 0 0 0 1.8rem;
  position: relative;
  gap: 0px;
  justify-content: flex-start;
 }
  .meta-item svg{
    position: absolute;
    left: 0;
    top: 0.2rem;
  }
}
</style>
