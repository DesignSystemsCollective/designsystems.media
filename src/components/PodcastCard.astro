---
import type { CollectionEntry } from "astro:content";
import FormattedDate from "../components/FormattedDate.astro";
import { formatDuration } from "../utils/formatDuration";
import { getShowImage } from "../utils/images";
import MediaImage from "./media/MediaImage.astro";

type Media = CollectionEntry<"podcast">;
type Props = Media["data"] & {
  slug?: Media["slug"];
  layoutType?: "grid" | "list";
};

const {
  title,
  publishedAt,
  duration = "",
  image,
  slug,
  hasEpisodeImage,
  showSlug,
  podcastTitle,
  layoutType = "grid",
} = Astro.props;

const imageToUse = getShowImage(showSlug, hasEpisodeImage ?? false, image?.src);

// Determine if it should be a list layout
const isListLayout = layoutType === "list";
---

<div
  class:list={[
    "media-item",
    "media-link", // Keep this for common styles
    {
      "media-list-layout": isListLayout, // Apply this class when it's a list
      "media-grid-layout": !isListLayout, // Apply this class when it's a grid (default)
    },
  ]}
>
  <a href={`/podcast/${slug}/`}>
    <MediaImage
      src={imageToUse}
      alt={title}
      duration={duration}
      variant="podcast-duration"
      showDuration={!isListLayout}
    />
  </a>
  <div class="media-content">
    <a href={`/podcast/${slug}/`} class="title"><h3>{title}</h3></a>
    <a href={`/show/${showSlug}/`} class="meta showTitle">{podcastTitle}</a>
    <div class="meta">
      <span><FormattedDate date={publishedAt} /></span> {isListLayout && 
      <span>â€¢</span> <span>{formatDuration(duration)}</span>
    }
    </div>
    
  </div>
</div>

<style>
  /* Style for each media item */
  .media-item {
    margin: 0;
  }
  .media-link {
    text-decoration: none;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .media-link:hover {
    .media-image img {
      /* outline: 1px solid var(--accent-hover); */
      box-shadow:
        0 0px 40px var(--accent-glow),
        0 0px 10px var(--accent-hover);
      outline: 1px solid var(--accent-hover);
      transition: box-shadow 1s ease-out;
    }
    .title {
      color: rgb(var(--accent));
    }
  }
  a:hover h3 {
    color: rgb(var(--accent));
  }
  .media-content a {
    text-decoration: none;
    border-bottom: none;
  }

  a h3 {
    font-size: 17px;
    font-weight: 400;
    margin: 2px 0;
  }

  a.showTitle {
    font-size: 15px;
    font-weight: 400;
    color: var(--tx-2);
  }
  a.showTitle:hover {
    text-decoration: underline;
  }

  .media-content {
    display: flex;
    flex-direction: column;
    gap: 2px;
  }
  .media-content .meta{
    font-size: 14px;
    color: var(--tx-3);
    display: flex;
    flex-direction: row;
    gap: 8px
  }

  /* Default "grid-like" layout (your current mobile layout) */
  .media-grid-layout {
    display: flex; /* Or grid, if you prefer a 2-column layout by default */
    flex-direction: column;
    gap: 1rem;
  }

  /* New list layout (similar to your @media rule) */
  .media-list-layout {
    display: grid;
    grid-template-columns: minmax(80px, 100px) 1fr; /* The layout you want for list */
    gap: 1rem; /* Adjust gap as needed for list */
    align-items: center; /* Vertically align items in the list row */
  }

  @media screen and (max-width: 768px) {
    .media-grid-layout {
      display: grid;
      grid-template-columns: 1fr 4fr;
      align-items: center;
    }
  }
</style>
